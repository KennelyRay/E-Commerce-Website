/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sql.js";
exports.ids = ["vendor-chunks/sql.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/sql.js/dist/sql-wasm.js":
/*!**********************************************!*\
  !*** ./node_modules/sql.js/dist/sql-wasm.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n// We are modularizing this manually because the current modularize setting in Emscripten has some issues:\n// https://github.com/kripken/emscripten/issues/5820\n// In addition, When you use emcc's modularization, it still expects to export a global object called `Module`,\n// which is able to be used/called before the WASM is loaded.\n// The modularization below exports a promise that loads and resolves to the actual sql.js module.\n// That way, this module can't be used before the WASM is finished loading.\n// We are going to define a function that a user will call to start loading initializing our Sql.js library\n// However, that function might be called multiple times, and on subsequent calls, we don't actually want it to instantiate a new instance of the Module\n// Instead, we want to return the previously loaded module\n// TODO: Make this not declare a global if used in the browser\nvar initSqlJsPromise = undefined;\nvar initSqlJs = function(moduleConfig) {\n    if (initSqlJsPromise) {\n        return initSqlJsPromise;\n    }\n    // If we're here, we've never called this function before\n    initSqlJsPromise = new Promise(function(resolveModule, reject) {\n        // We are modularizing this manually because the current modularize setting in Emscripten has some issues:\n        // https://github.com/kripken/emscripten/issues/5820\n        // The way to affect the loading of emcc compiled modules is to create a variable called `Module` and add\n        // properties to it, like `preRun`, `postRun`, etc\n        // We are using that to get notified when the WASM has finished loading.\n        // Only then will we return our promise\n        // If they passed in a moduleConfig object, use that\n        // Otherwise, initialize Module to the empty object\n        var Module = typeof moduleConfig !== \"undefined\" ? moduleConfig : {};\n        // EMCC only allows for a single onAbort function (not an array of functions)\n        // So if the user defined their own onAbort function, we remember it and call it\n        var originalOnAbortFunction = Module[\"onAbort\"];\n        Module[\"onAbort\"] = function(errorThatCausedAbort) {\n            reject(new Error(errorThatCausedAbort));\n            if (originalOnAbortFunction) {\n                originalOnAbortFunction(errorThatCausedAbort);\n            }\n        };\n        Module[\"postRun\"] = Module[\"postRun\"] || [];\n        Module[\"postRun\"].push(function() {\n            // When Emscripted calls postRun, this promise resolves with the built Module\n            resolveModule(Module);\n        });\n        // There is a section of code in the emcc-generated code below that looks like this:\n        // (Note that this is lowercase `module`)\n        // if (typeof module !== 'undefined') {\n        //     module['exports'] = Module;\n        // }\n        // When that runs, it's going to overwrite our own modularization export efforts in shell-post.js!\n        // The only way to tell emcc not to emit it is to pass the MODULARIZE=1 or MODULARIZE_INSTANCE=1 flags,\n        // but that carries with it additional unnecessary baggage/bugs we don't want either.\n        // So, we have three options:\n        // 1) We undefine `module`\n        // 2) We remember what `module['exports']` was at the beginning of this function and we restore it later\n        // 3) We write a script to remove those lines of code as part of the Make process.\n        //\n        // Since those are the only lines of code that care about module, we will undefine it. It's the most straightforward\n        // of the options, and has the side effect of reducing emcc's efforts to modify the module if its output were to change in the future.\n        // That's a nice side effect since we're handling the modularization efforts ourselves\n        module = undefined;\n        // The emcc-generated code and shell-post.js code goes below,\n        // meaning that all of it runs inside of this promise. If anything throws an exception, our promise will abort\n        var f;\n        f ||= typeof Module != \"undefined\" ? Module : {};\n        var aa = \"object\" == \"undefined\", ba = \"undefined\" != typeof WorkerGlobalScope, ca = \"object\" == typeof process && \"object\" == typeof process.versions && \"string\" == typeof process.versions.node && \"renderer\" != process.type;\n        \"use strict\";\n        f.onRuntimeInitialized = function() {\n            function a(g, l) {\n                switch(typeof l){\n                    case \"boolean\":\n                        dc(g, l ? 1 : 0);\n                        break;\n                    case \"number\":\n                        ec(g, l);\n                        break;\n                    case \"string\":\n                        fc(g, l, -1, -1);\n                        break;\n                    case \"object\":\n                        if (null === l) lb(g);\n                        else if (null != l.length) {\n                            var n = da(l, ea);\n                            gc(g, n, l.length, -1);\n                            fa(n);\n                        } else va(g, \"Wrong API use : tried to return a value of an unknown type (\" + l + \").\", -1);\n                        break;\n                    default:\n                        lb(g);\n                }\n            }\n            function b(g, l) {\n                for(var n = [], r = 0; r < g; r += 1){\n                    var t = m(l + 4 * r, \"i32\"), y = hc(t);\n                    if (1 === y || 2 === y) t = ic(t);\n                    else if (3 === y) t = jc(t);\n                    else if (4 === y) {\n                        y = t;\n                        t = kc(y);\n                        y = lc(y);\n                        for(var L = new Uint8Array(t), J = 0; J < t; J += 1)L[J] = p[y + J];\n                        t = L;\n                    } else t = null;\n                    n.push(t);\n                }\n                return n;\n            }\n            function c(g, l) {\n                this.Qa = g;\n                this.db = l;\n                this.Oa = 1;\n                this.lb = [];\n            }\n            function d(g, l) {\n                this.db = l;\n                l = ha(g) + 1;\n                this.eb = ia(l);\n                if (null === this.eb) throw Error(\"Unable to allocate memory for the SQL string\");\n                u(g, x, this.eb, l);\n                this.kb = this.eb;\n                this.Za = this.pb = null;\n            }\n            function e(g) {\n                this.filename = \"dbfile_\" + (4294967295 * Math.random() >>> 0);\n                if (null != g) {\n                    var l = this.filename, n = \"/\", r = l;\n                    n && (n = \"string\" == typeof n ? n : ja(n), r = l ? ka(n + \"/\" + l) : n);\n                    l = la(!0, !0);\n                    r = ma(r, l);\n                    if (g) {\n                        if (\"string\" == typeof g) {\n                            n = Array(g.length);\n                            for(var t = 0, y = g.length; t < y; ++t)n[t] = g.charCodeAt(t);\n                            g = n;\n                        }\n                        na(r, l | 146);\n                        n = oa(r, 577);\n                        pa(n, g, 0, g.length, 0);\n                        qa(n);\n                        na(r, l);\n                    }\n                }\n                this.handleError(q(this.filename, h));\n                this.db = m(h, \"i32\");\n                ob(this.db);\n                this.fb = {};\n                this.Sa = {};\n            }\n            var h = z(4), k = f.cwrap, q = k(\"sqlite3_open\", \"number\", [\n                \"string\",\n                \"number\"\n            ]), w = k(\"sqlite3_close_v2\", \"number\", [\n                \"number\"\n            ]), v = k(\"sqlite3_exec\", \"number\", [\n                \"number\",\n                \"string\",\n                \"number\",\n                \"number\",\n                \"number\"\n            ]), C = k(\"sqlite3_changes\", \"number\", [\n                \"number\"\n            ]), G = k(\"sqlite3_prepare_v2\", \"number\", [\n                \"number\",\n                \"string\",\n                \"number\",\n                \"number\",\n                \"number\"\n            ]), pb = k(\"sqlite3_sql\", \"string\", [\n                \"number\"\n            ]), nc = k(\"sqlite3_normalized_sql\", \"string\", [\n                \"number\"\n            ]), qb = k(\"sqlite3_prepare_v2\", \"number\", [\n                \"number\",\n                \"number\",\n                \"number\",\n                \"number\",\n                \"number\"\n            ]), oc = k(\"sqlite3_bind_text\", \"number\", [\n                \"number\",\n                \"number\",\n                \"number\",\n                \"number\",\n                \"number\"\n            ]), rb = k(\"sqlite3_bind_blob\", \"number\", [\n                \"number\",\n                \"number\",\n                \"number\",\n                \"number\",\n                \"number\"\n            ]), pc = k(\"sqlite3_bind_double\", \"number\", [\n                \"number\",\n                \"number\",\n                \"number\"\n            ]), qc = k(\"sqlite3_bind_int\", \"number\", [\n                \"number\",\n                \"number\",\n                \"number\"\n            ]), rc = k(\"sqlite3_bind_parameter_index\", \"number\", [\n                \"number\",\n                \"string\"\n            ]), sc = k(\"sqlite3_step\", \"number\", [\n                \"number\"\n            ]), tc = k(\"sqlite3_errmsg\", \"string\", [\n                \"number\"\n            ]), uc = k(\"sqlite3_column_count\", \"number\", [\n                \"number\"\n            ]), vc = k(\"sqlite3_data_count\", \"number\", [\n                \"number\"\n            ]), wc = k(\"sqlite3_column_double\", \"number\", [\n                \"number\",\n                \"number\"\n            ]), sb = k(\"sqlite3_column_text\", \"string\", [\n                \"number\",\n                \"number\"\n            ]), xc = k(\"sqlite3_column_blob\", \"number\", [\n                \"number\",\n                \"number\"\n            ]), yc = k(\"sqlite3_column_bytes\", \"number\", [\n                \"number\",\n                \"number\"\n            ]), zc = k(\"sqlite3_column_type\", \"number\", [\n                \"number\",\n                \"number\"\n            ]), Ac = k(\"sqlite3_column_name\", \"string\", [\n                \"number\",\n                \"number\"\n            ]), Bc = k(\"sqlite3_reset\", \"number\", [\n                \"number\"\n            ]), Cc = k(\"sqlite3_clear_bindings\", \"number\", [\n                \"number\"\n            ]), Dc = k(\"sqlite3_finalize\", \"number\", [\n                \"number\"\n            ]), tb = k(\"sqlite3_create_function_v2\", \"number\", \"number string number number number number number number number\".split(\" \")), hc = k(\"sqlite3_value_type\", \"number\", [\n                \"number\"\n            ]), kc = k(\"sqlite3_value_bytes\", \"number\", [\n                \"number\"\n            ]), jc = k(\"sqlite3_value_text\", \"string\", [\n                \"number\"\n            ]), lc = k(\"sqlite3_value_blob\", \"number\", [\n                \"number\"\n            ]), ic = k(\"sqlite3_value_double\", \"number\", [\n                \"number\"\n            ]), ec = k(\"sqlite3_result_double\", \"\", [\n                \"number\",\n                \"number\"\n            ]), lb = k(\"sqlite3_result_null\", \"\", [\n                \"number\"\n            ]), fc = k(\"sqlite3_result_text\", \"\", [\n                \"number\",\n                \"string\",\n                \"number\",\n                \"number\"\n            ]), gc = k(\"sqlite3_result_blob\", \"\", [\n                \"number\",\n                \"number\",\n                \"number\",\n                \"number\"\n            ]), dc = k(\"sqlite3_result_int\", \"\", [\n                \"number\",\n                \"number\"\n            ]), va = k(\"sqlite3_result_error\", \"\", [\n                \"number\",\n                \"string\",\n                \"number\"\n            ]), ub = k(\"sqlite3_aggregate_context\", \"number\", [\n                \"number\",\n                \"number\"\n            ]), ob = k(\"RegisterExtensionFunctions\", \"number\", [\n                \"number\"\n            ]), vb = k(\"sqlite3_update_hook\", \"number\", [\n                \"number\",\n                \"number\",\n                \"number\"\n            ]);\n            c.prototype.bind = function(g) {\n                if (!this.Qa) throw \"Statement closed\";\n                this.reset();\n                return Array.isArray(g) ? this.Cb(g) : null != g && \"object\" === typeof g ? this.Db(g) : !0;\n            };\n            c.prototype.step = function() {\n                if (!this.Qa) throw \"Statement closed\";\n                this.Oa = 1;\n                var g = sc(this.Qa);\n                switch(g){\n                    case 100:\n                        return !0;\n                    case 101:\n                        return !1;\n                    default:\n                        throw this.db.handleError(g);\n                }\n            };\n            c.prototype.wb = function(g) {\n                null == g && (g = this.Oa, this.Oa += 1);\n                return wc(this.Qa, g);\n            };\n            c.prototype.Gb = function(g) {\n                null == g && (g = this.Oa, this.Oa += 1);\n                g = sb(this.Qa, g);\n                if (\"function\" !== typeof BigInt) throw Error(\"BigInt is not supported\");\n                return BigInt(g);\n            };\n            c.prototype.Hb = function(g) {\n                null == g && (g = this.Oa, this.Oa += 1);\n                return sb(this.Qa, g);\n            };\n            c.prototype.getBlob = function(g) {\n                null == g && (g = this.Oa, this.Oa += 1);\n                var l = yc(this.Qa, g);\n                g = xc(this.Qa, g);\n                for(var n = new Uint8Array(l), r = 0; r < l; r += 1)n[r] = p[g + r];\n                return n;\n            };\n            c.prototype.get = function(g, l) {\n                l = l || {};\n                null != g && this.bind(g) && this.step();\n                g = [];\n                for(var n = vc(this.Qa), r = 0; r < n; r += 1)switch(zc(this.Qa, r)){\n                    case 1:\n                        var t = l.useBigInt ? this.Gb(r) : this.wb(r);\n                        g.push(t);\n                        break;\n                    case 2:\n                        g.push(this.wb(r));\n                        break;\n                    case 3:\n                        g.push(this.Hb(r));\n                        break;\n                    case 4:\n                        g.push(this.getBlob(r));\n                        break;\n                    default:\n                        g.push(null);\n                }\n                return g;\n            };\n            c.prototype.getColumnNames = function() {\n                for(var g = [], l = uc(this.Qa), n = 0; n < l; n += 1)g.push(Ac(this.Qa, n));\n                return g;\n            };\n            c.prototype.getAsObject = function(g, l) {\n                g = this.get(g, l);\n                l = this.getColumnNames();\n                for(var n = {}, r = 0; r < l.length; r += 1)n[l[r]] = g[r];\n                return n;\n            };\n            c.prototype.getSQL = function() {\n                return pb(this.Qa);\n            };\n            c.prototype.getNormalizedSQL = function() {\n                return nc(this.Qa);\n            };\n            c.prototype.run = function(g) {\n                null != g && this.bind(g);\n                this.step();\n                return this.reset();\n            };\n            c.prototype.sb = function(g, l) {\n                null == l && (l = this.Oa, this.Oa += 1);\n                g = ra(g);\n                var n = da(g, ea);\n                this.lb.push(n);\n                this.db.handleError(oc(this.Qa, l, n, g.length - 1, 0));\n            };\n            c.prototype.Bb = function(g, l) {\n                null == l && (l = this.Oa, this.Oa += 1);\n                var n = da(g, ea);\n                this.lb.push(n);\n                this.db.handleError(rb(this.Qa, l, n, g.length, 0));\n            };\n            c.prototype.rb = function(g, l) {\n                null == l && (l = this.Oa, this.Oa += 1);\n                this.db.handleError((g === (g | 0) ? qc : pc)(this.Qa, l, g));\n            };\n            c.prototype.Eb = function(g) {\n                null == g && (g = this.Oa, this.Oa += 1);\n                rb(this.Qa, g, 0, 0, 0);\n            };\n            c.prototype.tb = function(g, l) {\n                null == l && (l = this.Oa, this.Oa += 1);\n                switch(typeof g){\n                    case \"string\":\n                        this.sb(g, l);\n                        return;\n                    case \"number\":\n                        this.rb(g, l);\n                        return;\n                    case \"bigint\":\n                        this.sb(g.toString(), l);\n                        return;\n                    case \"boolean\":\n                        this.rb(g + 0, l);\n                        return;\n                    case \"object\":\n                        if (null === g) {\n                            this.Eb(l);\n                            return;\n                        }\n                        if (null != g.length) {\n                            this.Bb(g, l);\n                            return;\n                        }\n                }\n                throw \"Wrong API use : tried to bind a value of an unknown type (\" + g + \").\";\n            };\n            c.prototype.Db = function(g) {\n                var l = this;\n                Object.keys(g).forEach(function(n) {\n                    var r = rc(l.Qa, n);\n                    0 !== r && l.tb(g[n], r);\n                });\n                return !0;\n            };\n            c.prototype.Cb = function(g) {\n                for(var l = 0; l < g.length; l += 1)this.tb(g[l], l + 1);\n                return !0;\n            };\n            c.prototype.reset = function() {\n                this.freemem();\n                return 0 === Cc(this.Qa) && 0 === Bc(this.Qa);\n            };\n            c.prototype.freemem = function() {\n                for(var g; void 0 !== (g = this.lb.pop());)fa(g);\n            };\n            c.prototype.free = function() {\n                this.freemem();\n                var g = 0 === Dc(this.Qa);\n                delete this.db.fb[this.Qa];\n                this.Qa = 0;\n                return g;\n            };\n            d.prototype.next = function() {\n                if (null === this.eb) return {\n                    done: !0\n                };\n                null !== this.Za && (this.Za.free(), this.Za = null);\n                if (!this.db.db) throw this.mb(), Error(\"Database closed\");\n                var g = sa(), l = z(4);\n                ta(h);\n                ta(l);\n                try {\n                    this.db.handleError(qb(this.db.db, this.kb, -1, h, l));\n                    this.kb = m(l, \"i32\");\n                    var n = m(h, \"i32\");\n                    if (0 === n) return this.mb(), {\n                        done: !0\n                    };\n                    this.Za = new c(n, this.db);\n                    this.db.fb[n] = this.Za;\n                    return {\n                        value: this.Za,\n                        done: !1\n                    };\n                } catch (r) {\n                    throw this.pb = ua(this.kb), this.mb(), r;\n                } finally{\n                    wa(g);\n                }\n            };\n            d.prototype.mb = function() {\n                fa(this.eb);\n                this.eb = null;\n            };\n            d.prototype.getRemainingSQL = function() {\n                return null !== this.pb ? this.pb : ua(this.kb);\n            };\n            \"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator && (d.prototype[Symbol.iterator] = function() {\n                return this;\n            });\n            e.prototype.run = function(g, l) {\n                if (!this.db) throw \"Database closed\";\n                if (l) {\n                    g = this.prepare(g, l);\n                    try {\n                        g.step();\n                    } finally{\n                        g.free();\n                    }\n                } else this.handleError(v(this.db, g, 0, 0, h));\n                return this;\n            };\n            e.prototype.exec = function(g, l, n) {\n                if (!this.db) throw \"Database closed\";\n                var r = sa(), t = null;\n                try {\n                    var y = xa(g), L = z(4);\n                    for(g = []; 0 !== m(y, \"i8\");){\n                        ta(h);\n                        ta(L);\n                        this.handleError(qb(this.db, y, -1, h, L));\n                        var J = m(h, \"i32\");\n                        y = m(L, \"i32\");\n                        if (0 !== J) {\n                            var I = null;\n                            t = new c(J, this);\n                            for(null != l && t.bind(l); t.step();)null === I && (I = {\n                                columns: t.getColumnNames(),\n                                values: []\n                            }, g.push(I)), I.values.push(t.get(null, n));\n                            t.free();\n                        }\n                    }\n                    return g;\n                } catch (M) {\n                    throw t && t.free(), M;\n                } finally{\n                    wa(r);\n                }\n            };\n            e.prototype.each = function(g, l, n, r, t) {\n                \"function\" === typeof l && (r = n, n = l, l = void 0);\n                g = this.prepare(g, l);\n                try {\n                    for(; g.step();)n(g.getAsObject(null, t));\n                } finally{\n                    g.free();\n                }\n                if (\"function\" === typeof r) return r();\n            };\n            e.prototype.prepare = function(g, l) {\n                ta(h);\n                this.handleError(G(this.db, g, -1, h, 0));\n                g = m(h, \"i32\");\n                if (0 === g) throw \"Nothing to prepare\";\n                var n = new c(g, this);\n                null != l && n.bind(l);\n                return this.fb[g] = n;\n            };\n            e.prototype.iterateStatements = function(g) {\n                return new d(g, this);\n            };\n            e.prototype[\"export\"] = function() {\n                Object.values(this.fb).forEach(function(l) {\n                    l.free();\n                });\n                Object.values(this.Sa).forEach(A);\n                this.Sa = {};\n                this.handleError(w(this.db));\n                var g = ya(this.filename);\n                this.handleError(q(this.filename, h));\n                this.db = m(h, \"i32\");\n                ob(this.db);\n                return g;\n            };\n            e.prototype.close = function() {\n                null !== this.db && (Object.values(this.fb).forEach(function(g) {\n                    g.free();\n                }), Object.values(this.Sa).forEach(A), this.Sa = {}, this.Ya && (A(this.Ya), this.Ya = void 0), this.handleError(w(this.db)), za(\"/\" + this.filename), this.db = null);\n            };\n            e.prototype.handleError = function(g) {\n                if (0 === g) return null;\n                g = tc(this.db);\n                throw Error(g);\n            };\n            e.prototype.getRowsModified = function() {\n                return C(this.db);\n            };\n            e.prototype.create_function = function(g, l) {\n                Object.prototype.hasOwnProperty.call(this.Sa, g) && (A(this.Sa[g]), delete this.Sa[g]);\n                var n = Aa(function(r, t, y) {\n                    t = b(t, y);\n                    try {\n                        var L = l.apply(null, t);\n                    } catch (J) {\n                        va(r, J, -1);\n                        return;\n                    }\n                    a(r, L);\n                }, \"viii\");\n                this.Sa[g] = n;\n                this.handleError(tb(this.db, g, l.length, 1, 0, n, 0, 0, 0));\n                return this;\n            };\n            e.prototype.create_aggregate = function(g, l) {\n                var n = l.init || function() {\n                    return null;\n                }, r = l.finalize || function(I) {\n                    return I;\n                }, t = l.step;\n                if (!t) throw \"An aggregate function must have a step function in \" + g;\n                var y = {};\n                Object.hasOwnProperty.call(this.Sa, g) && (A(this.Sa[g]), delete this.Sa[g]);\n                l = g + \"__finalize\";\n                Object.hasOwnProperty.call(this.Sa, l) && (A(this.Sa[l]), delete this.Sa[l]);\n                var L = Aa(function(I, M, Ra) {\n                    var X = ub(I, 1);\n                    Object.hasOwnProperty.call(y, X) || (y[X] = n());\n                    M = b(M, Ra);\n                    M = [\n                        y[X]\n                    ].concat(M);\n                    try {\n                        y[X] = t.apply(null, M);\n                    } catch (Fc) {\n                        delete y[X], va(I, Fc, -1);\n                    }\n                }, \"viii\"), J = Aa(function(I) {\n                    var M = ub(I, 1);\n                    try {\n                        var Ra = r(y[M]);\n                    } catch (X) {\n                        delete y[M];\n                        va(I, X, -1);\n                        return;\n                    }\n                    a(I, Ra);\n                    delete y[M];\n                }, \"vi\");\n                this.Sa[g] = L;\n                this.Sa[l] = J;\n                this.handleError(tb(this.db, g, t.length - 1, 1, 0, 0, L, J, 0));\n                return this;\n            };\n            e.prototype.updateHook = function(g) {\n                this.Ya && (vb(this.db, 0, 0), A(this.Ya), this.Ya = void 0);\n                g && (this.Ya = Aa(function(l, n, r, t, y) {\n                    switch(n){\n                        case 18:\n                            l = \"insert\";\n                            break;\n                        case 23:\n                            l = \"update\";\n                            break;\n                        case 9:\n                            l = \"delete\";\n                            break;\n                        default:\n                            throw \"unknown operationCode in updateHook callback: \" + n;\n                    }\n                    r = r ? B(x, r) : \"\";\n                    t = t ? B(x, t) : \"\";\n                    if (y > Number.MAX_SAFE_INTEGER) throw \"rowId too big to fit inside a Number\";\n                    g(l, r, t, Number(y));\n                }, \"viiiij\"), vb(this.db, this.Ya, 0));\n            };\n            f.Database = e;\n        };\n        var Ba = {\n            ...f\n        }, Ca = \"./this.program\", Da = (a, b)=>{\n            throw b;\n        }, D = \"\", Ea, Fa;\n        if (ca) {\n            var fs = __webpack_require__(/*! fs */ \"fs\");\n            __webpack_require__(/*! path */ \"path\");\n            D = __dirname + \"/\";\n            Fa = (a)=>{\n                a = Ga(a) ? new URL(a) : a;\n                return fs.readFileSync(a);\n            };\n            Ea = async (a)=>{\n                a = Ga(a) ? new URL(a) : a;\n                return fs.readFileSync(a, void 0);\n            };\n            !f.thisProgram && 1 < process.argv.length && (Ca = process.argv[1].replace(/\\\\/g, \"/\"));\n            process.argv.slice(2);\n             true && (module.exports = f);\n            Da = (a, b)=>{\n                process.exitCode = a;\n                throw b;\n            };\n        } else if (aa || ba) ba ? D = self.location.href : \"undefined\" != typeof document && document.currentScript && (D = document.currentScript.src), D = D.startsWith(\"blob:\") ? \"\" : D.slice(0, D.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1), ba && (Fa = (a)=>{\n            var b = new XMLHttpRequest;\n            b.open(\"GET\", a, !1);\n            b.responseType = \"arraybuffer\";\n            b.send(null);\n            return new Uint8Array(b.response);\n        }), Ea = async (a)=>{\n            if (Ga(a)) return new Promise((c, d)=>{\n                var e = new XMLHttpRequest;\n                e.open(\"GET\", a, !0);\n                e.responseType = \"arraybuffer\";\n                e.onload = ()=>{\n                    200 == e.status || 0 == e.status && e.response ? c(e.response) : d(e.status);\n                };\n                e.onerror = d;\n                e.send(null);\n            });\n            var b = await fetch(a, {\n                credentials: \"same-origin\"\n            });\n            if (b.ok) return b.arrayBuffer();\n            throw Error(b.status + \" : \" + b.url);\n        };\n        var Ha = f.print || console.log.bind(console), Ia = f.printErr || console.error.bind(console);\n        Object.assign(f, Ba);\n        Ba = null;\n        f.thisProgram && (Ca = f.thisProgram);\n        var Ja = f.wasmBinary, Ka, La = !1, Ma, p, x, Na, E, F, Oa, H, Pa, Ga = (a)=>a.startsWith(\"file://\");\n        function Qa() {\n            var a = Ka.buffer;\n            f.HEAP8 = p = new Int8Array(a);\n            f.HEAP16 = Na = new Int16Array(a);\n            f.HEAPU8 = x = new Uint8Array(a);\n            f.HEAPU16 = new Uint16Array(a);\n            f.HEAP32 = E = new Int32Array(a);\n            f.HEAPU32 = F = new Uint32Array(a);\n            f.HEAPF32 = Oa = new Float32Array(a);\n            f.HEAPF64 = Pa = new Float64Array(a);\n            f.HEAP64 = H = new BigInt64Array(a);\n            f.HEAPU64 = new BigUint64Array(a);\n        }\n        var K = 0, Sa = null;\n        function Ta(a) {\n            f.onAbort?.(a);\n            a = \"Aborted(\" + a + \")\";\n            Ia(a);\n            La = !0;\n            throw new WebAssembly.RuntimeError(a + \". Build with -sASSERTIONS for more info.\");\n        }\n        var Ua;\n        async function Va(a) {\n            if (!Ja) try {\n                var b = await Ea(a);\n                return new Uint8Array(b);\n            } catch  {}\n            if (a == Ua && Ja) a = new Uint8Array(Ja);\n            else if (Fa) a = Fa(a);\n            else throw \"both async and sync fetching of the wasm failed\";\n            return a;\n        }\n        async function Wa(a, b) {\n            try {\n                var c = await Va(a);\n                return await WebAssembly.instantiate(c, b);\n            } catch (d) {\n                Ia(`failed to asynchronously prepare wasm: ${d}`), Ta(d);\n            }\n        }\n        async function Xa(a) {\n            var b = Ua;\n            if (!Ja && \"function\" == typeof WebAssembly.instantiateStreaming && !Ga(b) && !ca) try {\n                var c = fetch(b, {\n                    credentials: \"same-origin\"\n                });\n                return await WebAssembly.instantiateStreaming(c, a);\n            } catch (d) {\n                Ia(`wasm streaming compile failed: ${d}`), Ia(\"falling back to ArrayBuffer instantiation\");\n            }\n            return Wa(b, a);\n        }\n        class Ya {\n            constructor(a){\n                this.name = \"ExitStatus\";\n                this.message = `Program terminated with exit(${a})`;\n                this.status = a;\n            }\n        }\n        var Za = (a)=>{\n            for(; 0 < a.length;)a.shift()(f);\n        }, $a = [], ab = [], bb = ()=>{\n            var a = f.preRun.shift();\n            ab.unshift(a);\n        };\n        function m(a, b = \"i8\") {\n            b.endsWith(\"*\") && (b = \"*\");\n            switch(b){\n                case \"i1\":\n                    return p[a];\n                case \"i8\":\n                    return p[a];\n                case \"i16\":\n                    return Na[a >> 1];\n                case \"i32\":\n                    return E[a >> 2];\n                case \"i64\":\n                    return H[a >> 3];\n                case \"float\":\n                    return Oa[a >> 2];\n                case \"double\":\n                    return Pa[a >> 3];\n                case \"*\":\n                    return F[a >> 2];\n                default:\n                    Ta(`invalid type for getValue: ${b}`);\n            }\n        }\n        var cb = f.noExitRuntime || !0;\n        function ta(a) {\n            var b = \"i32\";\n            b.endsWith(\"*\") && (b = \"*\");\n            switch(b){\n                case \"i1\":\n                    p[a] = 0;\n                    break;\n                case \"i8\":\n                    p[a] = 0;\n                    break;\n                case \"i16\":\n                    Na[a >> 1] = 0;\n                    break;\n                case \"i32\":\n                    E[a >> 2] = 0;\n                    break;\n                case \"i64\":\n                    H[a >> 3] = BigInt(0);\n                    break;\n                case \"float\":\n                    Oa[a >> 2] = 0;\n                    break;\n                case \"double\":\n                    Pa[a >> 3] = 0;\n                    break;\n                case \"*\":\n                    F[a >> 2] = 0;\n                    break;\n                default:\n                    Ta(`invalid type for setValue: ${b}`);\n            }\n        }\n        var db = \"undefined\" != typeof TextDecoder ? new TextDecoder : void 0, B = (a, b = 0, c = NaN)=>{\n            var d = b + c;\n            for(c = b; a[c] && !(c >= d);)++c;\n            if (16 < c - b && a.buffer && db) return db.decode(a.subarray(b, c));\n            for(d = \"\"; b < c;){\n                var e = a[b++];\n                if (e & 128) {\n                    var h = a[b++] & 63;\n                    if (192 == (e & 224)) d += String.fromCharCode((e & 31) << 6 | h);\n                    else {\n                        var k = a[b++] & 63;\n                        e = 224 == (e & 240) ? (e & 15) << 12 | h << 6 | k : (e & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;\n                        65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n                    }\n                } else d += String.fromCharCode(e);\n            }\n            return d;\n        }, ua = (a, b)=>a ? B(x, a, b) : \"\", eb = (a, b)=>{\n            for(var c = 0, d = a.length - 1; 0 <= d; d--){\n                var e = a[d];\n                \".\" === e ? a.splice(d, 1) : \"..\" === e ? (a.splice(d, 1), c++) : c && (a.splice(d, 1), c--);\n            }\n            if (b) for(; c; c--)a.unshift(\"..\");\n            return a;\n        }, ka = (a)=>{\n            var b = \"/\" === a.charAt(0), c = \"/\" === a.slice(-1);\n            (a = eb(a.split(\"/\").filter((d)=>!!d), !b).join(\"/\")) || b || (a = \".\");\n            a && c && (a += \"/\");\n            return (b ? \"/\" : \"\") + a;\n        }, fb = (a)=>{\n            var b = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/.exec(a).slice(1);\n            a = b[0];\n            b = b[1];\n            if (!a && !b) return \".\";\n            b &&= b.slice(0, -1);\n            return a + b;\n        }, gb = (a)=>a && a.match(/([^\\/]+|\\/)\\/*$/)[1], hb = ()=>{\n            if (ca) {\n                var a = __webpack_require__(/*! crypto */ \"crypto\");\n                return (b)=>a.randomFillSync(b);\n            }\n            return (b)=>crypto.getRandomValues(b);\n        }, ib = (a)=>{\n            (ib = hb())(a);\n        }, jb = (...a)=>{\n            for(var b = \"\", c = !1, d = a.length - 1; -1 <= d && !c; d--){\n                c = 0 <= d ? a[d] : \"/\";\n                if (\"string\" != typeof c) throw new TypeError(\"Arguments to path.resolve must be strings\");\n                if (!c) return \"\";\n                b = c + \"/\" + b;\n                c = \"/\" === c.charAt(0);\n            }\n            b = eb(b.split(\"/\").filter((e)=>!!e), !c).join(\"/\");\n            return (c ? \"/\" : \"\") + b || \".\";\n        }, kb = [], ha = (a)=>{\n            for(var b = 0, c = 0; c < a.length; ++c){\n                var d = a.charCodeAt(c);\n                127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n        }, u = (a, b, c, d)=>{\n            if (!(0 < d)) return 0;\n            var e = c;\n            d = c + d - 1;\n            for(var h = 0; h < a.length; ++h){\n                var k = a.charCodeAt(h);\n                if (55296 <= k && 57343 >= k) {\n                    var q = a.charCodeAt(++h);\n                    k = 65536 + ((k & 1023) << 10) | q & 1023;\n                }\n                if (127 >= k) {\n                    if (c >= d) break;\n                    b[c++] = k;\n                } else {\n                    if (2047 >= k) {\n                        if (c + 1 >= d) break;\n                        b[c++] = 192 | k >> 6;\n                    } else {\n                        if (65535 >= k) {\n                            if (c + 2 >= d) break;\n                            b[c++] = 224 | k >> 12;\n                        } else {\n                            if (c + 3 >= d) break;\n                            b[c++] = 240 | k >> 18;\n                            b[c++] = 128 | k >> 12 & 63;\n                        }\n                        b[c++] = 128 | k >> 6 & 63;\n                    }\n                    b[c++] = 128 | k & 63;\n                }\n            }\n            b[c] = 0;\n            return c - e;\n        }, ra = (a, b)=>{\n            var c = Array(ha(a) + 1);\n            a = u(a, c, 0, c.length);\n            b && (c.length = a);\n            return c;\n        }, mb = [];\n        function nb(a, b) {\n            mb[a] = {\n                input: [],\n                output: [],\n                cb: b\n            };\n            wb(a, xb);\n        }\n        var xb = {\n            open (a) {\n                var b = mb[a.node.rdev];\n                if (!b) throw new N(43);\n                a.tty = b;\n                a.seekable = !1;\n            },\n            close (a) {\n                a.tty.cb.fsync(a.tty);\n            },\n            fsync (a) {\n                a.tty.cb.fsync(a.tty);\n            },\n            read (a, b, c, d) {\n                if (!a.tty || !a.tty.cb.xb) throw new N(60);\n                for(var e = 0, h = 0; h < d; h++){\n                    try {\n                        var k = a.tty.cb.xb(a.tty);\n                    } catch (q) {\n                        throw new N(29);\n                    }\n                    if (void 0 === k && 0 === e) throw new N(6);\n                    if (null === k || void 0 === k) break;\n                    e++;\n                    b[c + h] = k;\n                }\n                e && (a.node.atime = Date.now());\n                return e;\n            },\n            write (a, b, c, d) {\n                if (!a.tty || !a.tty.cb.qb) throw new N(60);\n                try {\n                    for(var e = 0; e < d; e++)a.tty.cb.qb(a.tty, b[c + e]);\n                } catch (h) {\n                    throw new N(29);\n                }\n                d && (a.node.mtime = a.node.ctime = Date.now());\n                return e;\n            }\n        }, yb = {\n            xb () {\n                a: {\n                    if (!kb.length) {\n                        var a = null;\n                        if (ca) {\n                            var b = Buffer.alloc(256), c = 0, d = process.stdin.fd;\n                            try {\n                                c = fs.readSync(d, b, 0, 256);\n                            } catch (e) {\n                                if (e.toString().includes(\"EOF\")) c = 0;\n                                else throw e;\n                            }\n                            0 < c && (a = b.slice(0, c).toString(\"utf-8\"));\n                        } else  false && (0);\n                        if (!a) {\n                            a = null;\n                            break a;\n                        }\n                        kb = ra(a, !0);\n                    }\n                    a = kb.shift();\n                }\n                return a;\n            },\n            qb (a, b) {\n                null === b || 10 === b ? (Ha(B(a.output)), a.output = []) : 0 != b && a.output.push(b);\n            },\n            fsync (a) {\n                0 < a.output?.length && (Ha(B(a.output)), a.output = []);\n            },\n            Tb () {\n                return {\n                    Ob: 25856,\n                    Qb: 5,\n                    Nb: 191,\n                    Pb: 35387,\n                    Mb: [\n                        3,\n                        28,\n                        127,\n                        21,\n                        4,\n                        0,\n                        1,\n                        0,\n                        17,\n                        19,\n                        26,\n                        0,\n                        18,\n                        15,\n                        23,\n                        22,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                };\n            },\n            Ub () {\n                return 0;\n            },\n            Vb () {\n                return [\n                    24,\n                    80\n                ];\n            }\n        }, zb = {\n            qb (a, b) {\n                null === b || 10 === b ? (Ia(B(a.output)), a.output = []) : 0 != b && a.output.push(b);\n            },\n            fsync (a) {\n                0 < a.output?.length && (Ia(B(a.output)), a.output = []);\n            }\n        }, O = {\n            Wa: null,\n            Xa () {\n                return O.createNode(null, \"/\", 16895, 0);\n            },\n            createNode (a, b, c, d) {\n                if (24576 === (c & 61440) || 4096 === (c & 61440)) throw new N(63);\n                O.Wa || (O.Wa = {\n                    dir: {\n                        node: {\n                            Ta: O.La.Ta,\n                            Ua: O.La.Ua,\n                            lookup: O.La.lookup,\n                            hb: O.La.hb,\n                            rename: O.La.rename,\n                            unlink: O.La.unlink,\n                            rmdir: O.La.rmdir,\n                            readdir: O.La.readdir,\n                            symlink: O.La.symlink\n                        },\n                        stream: {\n                            Va: O.Ma.Va\n                        }\n                    },\n                    file: {\n                        node: {\n                            Ta: O.La.Ta,\n                            Ua: O.La.Ua\n                        },\n                        stream: {\n                            Va: O.Ma.Va,\n                            read: O.Ma.read,\n                            write: O.Ma.write,\n                            ib: O.Ma.ib,\n                            jb: O.Ma.jb\n                        }\n                    },\n                    link: {\n                        node: {\n                            Ta: O.La.Ta,\n                            Ua: O.La.Ua,\n                            readlink: O.La.readlink\n                        },\n                        stream: {}\n                    },\n                    ub: {\n                        node: {\n                            Ta: O.La.Ta,\n                            Ua: O.La.Ua\n                        },\n                        stream: Ab\n                    }\n                });\n                c = Bb(a, b, c, d);\n                P(c.mode) ? (c.La = O.Wa.dir.node, c.Ma = O.Wa.dir.stream, c.Na = {}) : 32768 === (c.mode & 61440) ? (c.La = O.Wa.file.node, c.Ma = O.Wa.file.stream, c.Ra = 0, c.Na = null) : 40960 === (c.mode & 61440) ? (c.La = O.Wa.link.node, c.Ma = O.Wa.link.stream) : 8192 === (c.mode & 61440) && (c.La = O.Wa.ub.node, c.Ma = O.Wa.ub.stream);\n                c.atime = c.mtime = c.ctime = Date.now();\n                a && (a.Na[b] = c, a.atime = a.mtime = a.ctime = c.atime);\n                return c;\n            },\n            Sb (a) {\n                return a.Na ? a.Na.subarray ? a.Na.subarray(0, a.Ra) : new Uint8Array(a.Na) : new Uint8Array(0);\n            },\n            La: {\n                Ta (a) {\n                    var b = {};\n                    b.dev = 8192 === (a.mode & 61440) ? a.id : 1;\n                    b.ino = a.id;\n                    b.mode = a.mode;\n                    b.nlink = 1;\n                    b.uid = 0;\n                    b.gid = 0;\n                    b.rdev = a.rdev;\n                    P(a.mode) ? b.size = 4096 : 32768 === (a.mode & 61440) ? b.size = a.Ra : 40960 === (a.mode & 61440) ? b.size = a.link.length : b.size = 0;\n                    b.atime = new Date(a.atime);\n                    b.mtime = new Date(a.mtime);\n                    b.ctime = new Date(a.ctime);\n                    b.blksize = 4096;\n                    b.blocks = Math.ceil(b.size / b.blksize);\n                    return b;\n                },\n                Ua (a, b) {\n                    for (var c of [\n                        \"mode\",\n                        \"atime\",\n                        \"mtime\",\n                        \"ctime\"\n                    ])null != b[c] && (a[c] = b[c]);\n                    void 0 !== b.size && (b = b.size, a.Ra != b && (0 == b ? (a.Na = null, a.Ra = 0) : (c = a.Na, a.Na = new Uint8Array(b), c && a.Na.set(c.subarray(0, Math.min(b, a.Ra))), a.Ra = b)));\n                },\n                lookup () {\n                    throw O.vb;\n                },\n                hb (a, b, c, d) {\n                    return O.createNode(a, b, c, d);\n                },\n                rename (a, b, c) {\n                    try {\n                        var d = Q(b, c);\n                    } catch (h) {}\n                    if (d) {\n                        if (P(a.mode)) for(var e in d.Na)throw new N(55);\n                        Cb(d);\n                    }\n                    delete a.parent.Na[a.name];\n                    b.Na[c] = a;\n                    a.name = c;\n                    b.ctime = b.mtime = a.parent.ctime = a.parent.mtime = Date.now();\n                },\n                unlink (a, b) {\n                    delete a.Na[b];\n                    a.ctime = a.mtime = Date.now();\n                },\n                rmdir (a, b) {\n                    var c = Q(a, b), d;\n                    for(d in c.Na)throw new N(55);\n                    delete a.Na[b];\n                    a.ctime = a.mtime = Date.now();\n                },\n                readdir (a) {\n                    return [\n                        \".\",\n                        \"..\",\n                        ...Object.keys(a.Na)\n                    ];\n                },\n                symlink (a, b, c) {\n                    a = O.createNode(a, b, 41471, 0);\n                    a.link = c;\n                    return a;\n                },\n                readlink (a) {\n                    if (40960 !== (a.mode & 61440)) throw new N(28);\n                    return a.link;\n                }\n            },\n            Ma: {\n                read (a, b, c, d, e) {\n                    var h = a.node.Na;\n                    if (e >= a.node.Ra) return 0;\n                    a = Math.min(a.node.Ra - e, d);\n                    if (8 < a && h.subarray) b.set(h.subarray(e, e + a), c);\n                    else for(d = 0; d < a; d++)b[c + d] = h[e + d];\n                    return a;\n                },\n                write (a, b, c, d, e, h) {\n                    b.buffer === p.buffer && (h = !1);\n                    if (!d) return 0;\n                    a = a.node;\n                    a.mtime = a.ctime = Date.now();\n                    if (b.subarray && (!a.Na || a.Na.subarray)) {\n                        if (h) return a.Na = b.subarray(c, c + d), a.Ra = d;\n                        if (0 === a.Ra && 0 === e) return a.Na = b.slice(c, c + d), a.Ra = d;\n                        if (e + d <= a.Ra) return a.Na.set(b.subarray(c, c + d), e), d;\n                    }\n                    h = e + d;\n                    var k = a.Na ? a.Na.length : 0;\n                    k >= h || (h = Math.max(h, k * (1048576 > k ? 2 : 1.125) >>> 0), 0 != k && (h = Math.max(h, 256)), k = a.Na, a.Na = new Uint8Array(h), 0 < a.Ra && a.Na.set(k.subarray(0, a.Ra), 0));\n                    if (a.Na.subarray && b.subarray) a.Na.set(b.subarray(c, c + d), e);\n                    else for(h = 0; h < d; h++)a.Na[e + h] = b[c + h];\n                    a.Ra = Math.max(a.Ra, e + d);\n                    return d;\n                },\n                Va (a, b, c) {\n                    1 === c ? b += a.position : 2 === c && 32768 === (a.node.mode & 61440) && (b += a.node.Ra);\n                    if (0 > b) throw new N(28);\n                    return b;\n                },\n                ib (a, b, c, d, e) {\n                    if (32768 !== (a.node.mode & 61440)) throw new N(43);\n                    a = a.node.Na;\n                    if (e & 2 || !a || a.buffer !== p.buffer) {\n                        e = !0;\n                        d = 65536 * Math.ceil(b / 65536);\n                        var h = Db(65536, d);\n                        h && x.fill(0, h, h + d);\n                        d = h;\n                        if (!d) throw new N(48);\n                        if (a) {\n                            if (0 < c || c + b < a.length) a.subarray ? a = a.subarray(c, c + b) : a = Array.prototype.slice.call(a, c, c + b);\n                            p.set(a, d);\n                        }\n                    } else e = !1, d = a.byteOffset;\n                    return {\n                        Kb: d,\n                        Ab: e\n                    };\n                },\n                jb (a, b, c, d) {\n                    O.Ma.write(a, b, 0, d, c, !1);\n                    return 0;\n                }\n            }\n        }, la = (a, b)=>{\n            var c = 0;\n            a && (c |= 365);\n            b && (c |= 146);\n            return c;\n        }, Eb = null, Fb = {}, Gb = [], Hb = 1, R = null, Ib = !1, Jb = !0, Kb = {}, N = class {\n            constructor(a){\n                this.name = \"ErrnoError\";\n                this.Pa = a;\n            }\n        }, Lb = class {\n            get flags() {\n                return this.gb.flags;\n            }\n            set flags(a) {\n                this.gb.flags = a;\n            }\n            get position() {\n                return this.gb.position;\n            }\n            set position(a) {\n                this.gb.position = a;\n            }\n            constructor(){\n                this.gb = {};\n                this.node = null;\n            }\n        }, Mb = class {\n            constructor(a, b, c, d){\n                this.La = {};\n                this.Ma = {};\n                this.ab = null;\n                a ||= this;\n                this.parent = a;\n                this.Xa = a.Xa;\n                this.id = Hb++;\n                this.name = b;\n                this.mode = c;\n                this.rdev = d;\n                this.atime = this.mtime = this.ctime = Date.now();\n            }\n            get read() {\n                return 365 === (this.mode & 365);\n            }\n            set read(a) {\n                a ? this.mode |= 365 : this.mode &= -366;\n            }\n            get write() {\n                return 146 === (this.mode & 146);\n            }\n            set write(a) {\n                a ? this.mode |= 146 : this.mode &= -147;\n            }\n        };\n        function S(a, b = {}) {\n            if (!a) throw new N(44);\n            b.nb ?? (b.nb = !0);\n            \"/\" === a.charAt(0) || (a = \"//\" + a);\n            var c = 0;\n            a: for(; 40 > c; c++){\n                a = a.split(\"/\").filter((q)=>!!q);\n                for(var d = Eb, e = \"/\", h = 0; h < a.length; h++){\n                    var k = h === a.length - 1;\n                    if (k && b.parent) break;\n                    if (\".\" !== a[h]) if (\"..\" === a[h]) e = fb(e), d = d.parent;\n                    else {\n                        e = ka(e + \"/\" + a[h]);\n                        try {\n                            d = Q(d, a[h]);\n                        } catch (q) {\n                            if (44 === q?.Pa && k && b.Jb) return {\n                                path: e\n                            };\n                            throw q;\n                        }\n                        !d.ab || k && !b.nb || (d = d.ab.root);\n                        if (40960 === (d.mode & 61440) && (!k || b.$a)) {\n                            if (!d.La.readlink) throw new N(52);\n                            d = d.La.readlink(d);\n                            \"/\" === d.charAt(0) || (d = fb(e) + \"/\" + d);\n                            a = d + \"/\" + a.slice(h + 1).join(\"/\");\n                            continue a;\n                        }\n                    }\n                }\n                return {\n                    path: e,\n                    node: d\n                };\n            }\n            throw new N(32);\n        }\n        function ja(a) {\n            for(var b;;){\n                if (a === a.parent) return a = a.Xa.zb, b ? \"/\" !== a[a.length - 1] ? `${a}/${b}` : a + b : a;\n                b = b ? `${a.name}/${b}` : a.name;\n                a = a.parent;\n            }\n        }\n        function Nb(a, b) {\n            for(var c = 0, d = 0; d < b.length; d++)c = (c << 5) - c + b.charCodeAt(d) | 0;\n            return (a + c >>> 0) % R.length;\n        }\n        function Cb(a) {\n            var b = Nb(a.parent.id, a.name);\n            if (R[b] === a) R[b] = a.bb;\n            else for(b = R[b]; b;){\n                if (b.bb === a) {\n                    b.bb = a.bb;\n                    break;\n                }\n                b = b.bb;\n            }\n        }\n        function Q(a, b) {\n            var c = P(a.mode) ? (c = Ob(a, \"x\")) ? c : a.La.lookup ? 0 : 2 : 54;\n            if (c) throw new N(c);\n            for(c = R[Nb(a.id, b)]; c; c = c.bb){\n                var d = c.name;\n                if (c.parent.id === a.id && d === b) return c;\n            }\n            return a.La.lookup(a, b);\n        }\n        function Bb(a, b, c, d) {\n            a = new Mb(a, b, c, d);\n            b = Nb(a.parent.id, a.name);\n            a.bb = R[b];\n            return R[b] = a;\n        }\n        function P(a) {\n            return 16384 === (a & 61440);\n        }\n        function Pb(a) {\n            var b = [\n                \"r\",\n                \"w\",\n                \"rw\"\n            ][a & 3];\n            a & 512 && (b += \"w\");\n            return b;\n        }\n        function Ob(a, b) {\n            if (Jb) return 0;\n            if (!b.includes(\"r\") || a.mode & 292) {\n                if (b.includes(\"w\") && !(a.mode & 146) || b.includes(\"x\") && !(a.mode & 73)) return 2;\n            } else return 2;\n            return 0;\n        }\n        function Qb(a, b) {\n            if (!P(a.mode)) return 54;\n            try {\n                return Q(a, b), 20;\n            } catch (c) {}\n            return Ob(a, \"wx\");\n        }\n        function Rb(a, b, c) {\n            try {\n                var d = Q(a, b);\n            } catch (e) {\n                return e.Pa;\n            }\n            if (a = Ob(a, \"wx\")) return a;\n            if (c) {\n                if (!P(d.mode)) return 54;\n                if (d === d.parent || \"/\" === ja(d)) return 10;\n            } else if (P(d.mode)) return 31;\n            return 0;\n        }\n        function Sb(a) {\n            if (!a) throw new N(63);\n            return a;\n        }\n        function T(a) {\n            a = Gb[a];\n            if (!a) throw new N(8);\n            return a;\n        }\n        function Tb(a, b = -1) {\n            a = Object.assign(new Lb, a);\n            if (-1 == b) a: {\n                for(b = 0; 4096 >= b; b++)if (!Gb[b]) break a;\n                throw new N(33);\n            }\n            a.fd = b;\n            return Gb[b] = a;\n        }\n        function Ub(a, b = -1) {\n            a = Tb(a, b);\n            a.Ma?.Rb?.(a);\n            return a;\n        }\n        function Vb(a, b, c) {\n            var d = a?.Ma.Ua;\n            a = d ? a : b;\n            d ??= b.La.Ua;\n            Sb(d);\n            d(a, c);\n        }\n        var Ab = {\n            open (a) {\n                a.Ma = Fb[a.node.rdev].Ma;\n                a.Ma.open?.(a);\n            },\n            Va () {\n                throw new N(70);\n            }\n        };\n        function wb(a, b) {\n            Fb[a] = {\n                Ma: b\n            };\n        }\n        function Wb(a, b) {\n            var c = \"/\" === b;\n            if (c && Eb) throw new N(10);\n            if (!c && b) {\n                var d = S(b, {\n                    nb: !1\n                });\n                b = d.path;\n                d = d.node;\n                if (d.ab) throw new N(10);\n                if (!P(d.mode)) throw new N(54);\n            }\n            b = {\n                type: a,\n                Wb: {},\n                zb: b,\n                Ib: []\n            };\n            a = a.Xa(b);\n            a.Xa = b;\n            b.root = a;\n            c ? Eb = a : d && (d.ab = b, d.Xa && d.Xa.Ib.push(b));\n        }\n        function Xb(a, b, c) {\n            var d = S(a, {\n                parent: !0\n            }).node;\n            a = gb(a);\n            if (!a) throw new N(28);\n            if (\".\" === a || \"..\" === a) throw new N(20);\n            var e = Qb(d, a);\n            if (e) throw new N(e);\n            if (!d.La.hb) throw new N(63);\n            return d.La.hb(d, a, b, c);\n        }\n        function ma(a, b = 438) {\n            return Xb(a, b & 4095 | 32768, 0);\n        }\n        function U(a, b = 511) {\n            return Xb(a, b & 1023 | 16384, 0);\n        }\n        function Yb(a, b, c) {\n            \"undefined\" == typeof c && (c = b, b = 438);\n            Xb(a, b | 8192, c);\n        }\n        function Zb(a, b) {\n            if (!jb(a)) throw new N(44);\n            var c = S(b, {\n                parent: !0\n            }).node;\n            if (!c) throw new N(44);\n            b = gb(b);\n            var d = Qb(c, b);\n            if (d) throw new N(d);\n            if (!c.La.symlink) throw new N(63);\n            c.La.symlink(c, b, a);\n        }\n        function $b(a) {\n            var b = S(a, {\n                parent: !0\n            }).node;\n            a = gb(a);\n            var c = Q(b, a), d = Rb(b, a, !0);\n            if (d) throw new N(d);\n            if (!b.La.rmdir) throw new N(63);\n            if (c.ab) throw new N(10);\n            b.La.rmdir(b, a);\n            Cb(c);\n        }\n        function za(a) {\n            var b = S(a, {\n                parent: !0\n            }).node;\n            if (!b) throw new N(44);\n            a = gb(a);\n            var c = Q(b, a), d = Rb(b, a, !1);\n            if (d) throw new N(d);\n            if (!b.La.unlink) throw new N(63);\n            if (c.ab) throw new N(10);\n            b.La.unlink(b, a);\n            Cb(c);\n        }\n        function ac(a, b) {\n            a = S(a, {\n                $a: !b\n            }).node;\n            return Sb(a.La.Ta)(a);\n        }\n        function bc(a, b, c, d) {\n            Vb(a, b, {\n                mode: c & 4095 | b.mode & -4096,\n                ctime: Date.now(),\n                Fb: d\n            });\n        }\n        function na(a, b) {\n            a = \"string\" == typeof a ? S(a, {\n                $a: !0\n            }).node : a;\n            bc(null, a, b);\n        }\n        function cc(a, b, c) {\n            if (P(b.mode)) throw new N(31);\n            if (32768 !== (b.mode & 61440)) throw new N(28);\n            var d = Ob(b, \"w\");\n            if (d) throw new N(d);\n            Vb(a, b, {\n                size: c,\n                timestamp: Date.now()\n            });\n        }\n        function oa(a, b, c = 438) {\n            if (\"\" === a) throw new N(44);\n            if (\"string\" == typeof b) {\n                var d = {\n                    r: 0,\n                    \"r+\": 2,\n                    w: 577,\n                    \"w+\": 578,\n                    a: 1089,\n                    \"a+\": 1090\n                }[b];\n                if (\"undefined\" == typeof d) throw Error(`Unknown file open mode: ${b}`);\n                b = d;\n            }\n            c = b & 64 ? c & 4095 | 32768 : 0;\n            if (\"object\" == typeof a) d = a;\n            else {\n                var e = a.endsWith(\"/\");\n                a = S(a, {\n                    $a: !(b & 131072),\n                    Jb: !0\n                });\n                d = a.node;\n                a = a.path;\n            }\n            var h = !1;\n            if (b & 64) if (d) {\n                if (b & 128) throw new N(20);\n            } else {\n                if (e) throw new N(31);\n                d = Xb(a, c | 511, 0);\n                h = !0;\n            }\n            if (!d) throw new N(44);\n            8192 === (d.mode & 61440) && (b &= -513);\n            if (b & 65536 && !P(d.mode)) throw new N(54);\n            if (!h && (e = d ? 40960 === (d.mode & 61440) ? 32 : P(d.mode) && (\"r\" !== Pb(b) || b & 576) ? 31 : Ob(d, Pb(b)) : 44)) throw new N(e);\n            b & 512 && !h && (e = d, e = \"string\" == typeof e ? S(e, {\n                $a: !0\n            }).node : e, cc(null, e, 0));\n            b &= -131713;\n            e = Tb({\n                node: d,\n                path: ja(d),\n                flags: b,\n                seekable: !0,\n                position: 0,\n                Ma: d.Ma,\n                Lb: [],\n                error: !1\n            });\n            e.Ma.open && e.Ma.open(e);\n            h && na(d, c & 511);\n            !f.logReadFiles || b & 1 || a in Kb || (Kb[a] = 1);\n            return e;\n        }\n        function qa(a) {\n            if (null === a.fd) throw new N(8);\n            a.ob && (a.ob = null);\n            try {\n                a.Ma.close && a.Ma.close(a);\n            } catch (b) {\n                throw b;\n            } finally{\n                Gb[a.fd] = null;\n            }\n            a.fd = null;\n        }\n        function mc(a, b, c) {\n            if (null === a.fd) throw new N(8);\n            if (!a.seekable || !a.Ma.Va) throw new N(70);\n            if (0 != c && 1 != c && 2 != c) throw new N(28);\n            a.position = a.Ma.Va(a, b, c);\n            a.Lb = [];\n        }\n        function Ec(a, b, c, d, e) {\n            if (0 > d || 0 > e) throw new N(28);\n            if (null === a.fd) throw new N(8);\n            if (1 === (a.flags & 2097155)) throw new N(8);\n            if (P(a.node.mode)) throw new N(31);\n            if (!a.Ma.read) throw new N(28);\n            var h = \"undefined\" != typeof e;\n            if (!h) e = a.position;\n            else if (!a.seekable) throw new N(70);\n            b = a.Ma.read(a, b, c, d, e);\n            h || (a.position += b);\n            return b;\n        }\n        function pa(a, b, c, d, e) {\n            if (0 > d || 0 > e) throw new N(28);\n            if (null === a.fd) throw new N(8);\n            if (0 === (a.flags & 2097155)) throw new N(8);\n            if (P(a.node.mode)) throw new N(31);\n            if (!a.Ma.write) throw new N(28);\n            a.seekable && a.flags & 1024 && mc(a, 0, 2);\n            var h = \"undefined\" != typeof e;\n            if (!h) e = a.position;\n            else if (!a.seekable) throw new N(70);\n            b = a.Ma.write(a, b, c, d, e, void 0);\n            h || (a.position += b);\n            return b;\n        }\n        function ya(a) {\n            var b = \"binary\";\n            if (\"utf8\" !== b && \"binary\" !== b) throw Error(`Invalid encoding type \"${b}\"`);\n            var c;\n            var d = oa(a, d || 0);\n            a = ac(a).size;\n            var e = new Uint8Array(a);\n            Ec(d, e, 0, a, 0);\n            \"utf8\" === b ? c = B(e) : \"binary\" === b && (c = e);\n            qa(d);\n            return c;\n        }\n        function V(a, b, c) {\n            a = ka(\"/dev/\" + a);\n            var d = la(!!b, !!c);\n            V.yb ?? (V.yb = 64);\n            var e = V.yb++ << 8 | 0;\n            wb(e, {\n                open (h) {\n                    h.seekable = !1;\n                },\n                close () {\n                    c?.buffer?.length && c(10);\n                },\n                read (h, k, q, w) {\n                    for(var v = 0, C = 0; C < w; C++){\n                        try {\n                            var G = b();\n                        } catch (pb) {\n                            throw new N(29);\n                        }\n                        if (void 0 === G && 0 === v) throw new N(6);\n                        if (null === G || void 0 === G) break;\n                        v++;\n                        k[q + C] = G;\n                    }\n                    v && (h.node.atime = Date.now());\n                    return v;\n                },\n                write (h, k, q, w) {\n                    for(var v = 0; v < w; v++)try {\n                        c(k[q + v]);\n                    } catch (C) {\n                        throw new N(29);\n                    }\n                    w && (h.node.mtime = h.node.ctime = Date.now());\n                    return v;\n                }\n            });\n            Yb(a, d, e);\n        }\n        var W = {};\n        function Gc(a, b, c) {\n            if (\"/\" === b.charAt(0)) return b;\n            a = -100 === a ? \"/\" : T(a).path;\n            if (0 == b.length) {\n                if (!c) throw new N(44);\n                return a;\n            }\n            return a + \"/\" + b;\n        }\n        function Hc(a, b) {\n            E[a >> 2] = b.dev;\n            E[a + 4 >> 2] = b.mode;\n            F[a + 8 >> 2] = b.nlink;\n            E[a + 12 >> 2] = b.uid;\n            E[a + 16 >> 2] = b.gid;\n            E[a + 20 >> 2] = b.rdev;\n            H[a + 24 >> 3] = BigInt(b.size);\n            E[a + 32 >> 2] = 4096;\n            E[a + 36 >> 2] = b.blocks;\n            var c = b.atime.getTime(), d = b.mtime.getTime(), e = b.ctime.getTime();\n            H[a + 40 >> 3] = BigInt(Math.floor(c / 1E3));\n            F[a + 48 >> 2] = c % 1E3 * 1E6;\n            H[a + 56 >> 3] = BigInt(Math.floor(d / 1E3));\n            F[a + 64 >> 2] = d % 1E3 * 1E6;\n            H[a + 72 >> 3] = BigInt(Math.floor(e / 1E3));\n            F[a + 80 >> 2] = e % 1E3 * 1E6;\n            H[a + 88 >> 3] = BigInt(b.ino);\n            return 0;\n        }\n        var Ic = void 0, Jc = ()=>{\n            var a = E[+Ic >> 2];\n            Ic += 4;\n            return a;\n        }, Kc = 0, Lc = [\n            0,\n            31,\n            60,\n            91,\n            121,\n            152,\n            182,\n            213,\n            244,\n            274,\n            305,\n            335\n        ], Mc = [\n            0,\n            31,\n            59,\n            90,\n            120,\n            151,\n            181,\n            212,\n            243,\n            273,\n            304,\n            334\n        ], Nc = {}, Oc = (a)=>{\n            Ma = a;\n            cb || 0 < Kc || (f.onExit?.(a), La = !0);\n            Da(a, new Ya(a));\n        }, Pc = (a)=>{\n            if (!La) try {\n                if (a(), !(cb || 0 < Kc)) try {\n                    Ma = a = Ma, Oc(a);\n                } catch (b) {\n                    b instanceof Ya || \"unwind\" == b || Da(1, b);\n                }\n            } catch (b) {\n                b instanceof Ya || \"unwind\" == b || Da(1, b);\n            }\n        }, Qc = {}, Sc = ()=>{\n            if (!Rc) {\n                var a = {\n                    USER: \"web_user\",\n                    LOGNAME: \"web_user\",\n                    PATH: \"/\",\n                    PWD: \"/\",\n                    HOME: \"/home/web_user\",\n                    LANG: (\"object\" == typeof navigator && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\",\n                    _: Ca || \"./this.program\"\n                }, b;\n                for(b in Qc)void 0 === Qc[b] ? delete a[b] : a[b] = Qc[b];\n                var c = [];\n                for(b in a)c.push(`${b}=${a[b]}`);\n                Rc = c;\n            }\n            return Rc;\n        }, Rc, xa = (a)=>{\n            var b = ha(a) + 1, c = z(b);\n            u(a, x, c, b);\n            return c;\n        }, Tc = (a, b, c, d)=>{\n            var e = {\n                string: (v)=>{\n                    var C = 0;\n                    null !== v && void 0 !== v && 0 !== v && (C = xa(v));\n                    return C;\n                },\n                array: (v)=>{\n                    var C = z(v.length);\n                    p.set(v, C);\n                    return C;\n                }\n            };\n            a = f[\"_\" + a];\n            var h = [], k = 0;\n            if (d) for(var q = 0; q < d.length; q++){\n                var w = e[c[q]];\n                w ? (0 === k && (k = sa()), h[q] = w(d[q])) : h[q] = d[q];\n            }\n            c = a(...h);\n            return c = function(v) {\n                0 !== k && wa(k);\n                return \"string\" === b ? v ? B(x, v) : \"\" : \"boolean\" === b ? !!v : v;\n            }(c);\n        }, ea = 0, da = (a, b)=>{\n            b = 1 == b ? z(a.length) : ia(a.length);\n            a.subarray || a.slice || (a = new Uint8Array(a));\n            x.set(a, b);\n            return b;\n        }, Uc, Vc = [], Y, A = (a)=>{\n            Uc.delete(Y.get(a));\n            Y.set(a, null);\n            Vc.push(a);\n        }, Aa = (a, b)=>{\n            if (!Uc) {\n                Uc = new WeakMap;\n                var c = Y.length;\n                if (Uc) for(var d = 0; d < 0 + c; d++){\n                    var e = Y.get(d);\n                    e && Uc.set(e, d);\n                }\n            }\n            if (c = Uc.get(a) || 0) return c;\n            if (Vc.length) c = Vc.pop();\n            else {\n                try {\n                    Y.grow(1);\n                } catch (w) {\n                    if (!(w instanceof RangeError)) throw w;\n                    throw \"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.\";\n                }\n                c = Y.length - 1;\n            }\n            try {\n                Y.set(c, a);\n            } catch (w) {\n                if (!(w instanceof TypeError)) throw w;\n                if (\"function\" == typeof WebAssembly.Function) {\n                    var h = WebAssembly.Function;\n                    d = {\n                        i: \"i32\",\n                        j: \"i64\",\n                        f: \"f32\",\n                        d: \"f64\",\n                        e: \"externref\",\n                        p: \"i32\"\n                    };\n                    e = {\n                        parameters: [],\n                        results: \"v\" == b[0] ? [] : [\n                            d[b[0]]\n                        ]\n                    };\n                    for(var k = 1; k < b.length; ++k)e.parameters.push(d[b[k]]);\n                    b = new h(e, a);\n                } else {\n                    d = [\n                        1\n                    ];\n                    e = b.slice(0, 1);\n                    b = b.slice(1);\n                    k = {\n                        i: 127,\n                        p: 127,\n                        j: 126,\n                        f: 125,\n                        d: 124,\n                        e: 111\n                    };\n                    d.push(96);\n                    var q = b.length;\n                    128 > q ? d.push(q) : d.push(q % 128 | 128, q >> 7);\n                    for (h of b)d.push(k[h]);\n                    \"v\" == e ? d.push(0) : d.push(1, k[e]);\n                    b = [\n                        0,\n                        97,\n                        115,\n                        109,\n                        1,\n                        0,\n                        0,\n                        0,\n                        1\n                    ];\n                    h = d.length;\n                    128 > h ? b.push(h) : b.push(h % 128 | 128, h >> 7);\n                    b.push(...d);\n                    b.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);\n                    b = new WebAssembly.Module(new Uint8Array(b));\n                    b = new WebAssembly.Instance(b, {\n                        e: {\n                            f: a\n                        }\n                    }).exports.f;\n                }\n                Y.set(c, b);\n            }\n            Uc.set(a, c);\n            return c;\n        };\n        R = Array(4096);\n        Wb(O, \"/\");\n        U(\"/tmp\");\n        U(\"/home\");\n        U(\"/home/web_user\");\n        (function() {\n            U(\"/dev\");\n            wb(259, {\n                read: ()=>0,\n                write: (d, e, h, k)=>k,\n                Va: ()=>0\n            });\n            Yb(\"/dev/null\", 259);\n            nb(1280, yb);\n            nb(1536, zb);\n            Yb(\"/dev/tty\", 1280);\n            Yb(\"/dev/tty1\", 1536);\n            var a = new Uint8Array(1024), b = 0, c = ()=>{\n                0 === b && (ib(a), b = a.byteLength);\n                return a[--b];\n            };\n            V(\"random\", c);\n            V(\"urandom\", c);\n            U(\"/dev/shm\");\n            U(\"/dev/shm/tmp\");\n        })();\n        (function() {\n            U(\"/proc\");\n            var a = U(\"/proc/self\");\n            U(\"/proc/self/fd\");\n            Wb({\n                Xa () {\n                    var b = Bb(a, \"fd\", 16895, 73);\n                    b.Ma = {\n                        Va: O.Ma.Va\n                    };\n                    b.La = {\n                        lookup (c, d) {\n                            c = +d;\n                            var e = T(c);\n                            c = {\n                                parent: null,\n                                Xa: {\n                                    zb: \"fake\"\n                                },\n                                La: {\n                                    readlink: ()=>e.path\n                                },\n                                id: c + 1\n                            };\n                            return c.parent = c;\n                        },\n                        readdir () {\n                            return Array.from(Gb.entries()).filter(([, c])=>c).map(([c])=>c.toString());\n                        }\n                    };\n                    return b;\n                }\n            }, \"/proc/self/fd\");\n        })();\n        O.vb = new N(44);\n        O.vb.stack = \"<generic error, no stack>\";\n        var Xc = {\n            a: (a, b, c, d)=>Ta(`Assertion failed: ${a ? B(x, a) : \"\"}, at: ` + [\n                    b ? b ? B(x, b) : \"\" : \"unknown filename\",\n                    c,\n                    d ? d ? B(x, d) : \"\" : \"unknown function\"\n                ]),\n            i: function(a, b) {\n                try {\n                    return a = a ? B(x, a) : \"\", na(a, b), 0;\n                } catch (c) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== c.name) throw c;\n                    return -c.Pa;\n                }\n            },\n            L: function(a, b, c) {\n                try {\n                    b = b ? B(x, b) : \"\";\n                    b = Gc(a, b);\n                    if (c & -8) return -28;\n                    var d = S(b, {\n                        $a: !0\n                    }).node;\n                    if (!d) return -44;\n                    a = \"\";\n                    c & 4 && (a += \"r\");\n                    c & 2 && (a += \"w\");\n                    c & 1 && (a += \"x\");\n                    return a && Ob(d, a) ? -2 : 0;\n                } catch (e) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== e.name) throw e;\n                    return -e.Pa;\n                }\n            },\n            j: function(a, b) {\n                try {\n                    var c = T(a);\n                    bc(c, c.node, b, !1);\n                    return 0;\n                } catch (d) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== d.name) throw d;\n                    return -d.Pa;\n                }\n            },\n            h: function(a) {\n                try {\n                    var b = T(a);\n                    Vb(b, b.node, {\n                        timestamp: Date.now(),\n                        Fb: !1\n                    });\n                    return 0;\n                } catch (c) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== c.name) throw c;\n                    return -c.Pa;\n                }\n            },\n            b: function(a, b, c) {\n                Ic = c;\n                try {\n                    var d = T(a);\n                    switch(b){\n                        case 0:\n                            var e = Jc();\n                            if (0 > e) break;\n                            for(; Gb[e];)e++;\n                            return Ub(d, e).fd;\n                        case 1:\n                        case 2:\n                            return 0;\n                        case 3:\n                            return d.flags;\n                        case 4:\n                            return e = Jc(), d.flags |= e, 0;\n                        case 12:\n                            return e = Jc(), Na[e + 0 >> 1] = 2, 0;\n                        case 13:\n                        case 14:\n                            return 0;\n                    }\n                    return -28;\n                } catch (h) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== h.name) throw h;\n                    return -h.Pa;\n                }\n            },\n            g: function(a, b) {\n                try {\n                    var c = T(a), d = c.node, e = c.Ma.Ta;\n                    a = e ? c : d;\n                    e ??= d.La.Ta;\n                    Sb(e);\n                    var h = e(a);\n                    return Hc(b, h);\n                } catch (k) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== k.name) throw k;\n                    return -k.Pa;\n                }\n            },\n            H: function(a, b) {\n                b = -9007199254740992 > b || 9007199254740992 < b ? NaN : Number(b);\n                try {\n                    if (isNaN(b)) return 61;\n                    var c = T(a);\n                    if (0 > b || 0 === (c.flags & 2097155)) throw new N(28);\n                    cc(c, c.node, b);\n                    return 0;\n                } catch (d) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== d.name) throw d;\n                    return -d.Pa;\n                }\n            },\n            G: function(a, b) {\n                try {\n                    if (0 === b) return -28;\n                    var c = ha(\"/\") + 1;\n                    if (b < c) return -68;\n                    u(\"/\", x, a, b);\n                    return c;\n                } catch (d) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== d.name) throw d;\n                    return -d.Pa;\n                }\n            },\n            K: function(a, b) {\n                try {\n                    return a = a ? B(x, a) : \"\", Hc(b, ac(a, !0));\n                } catch (c) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== c.name) throw c;\n                    return -c.Pa;\n                }\n            },\n            C: function(a, b, c) {\n                try {\n                    return b = b ? B(x, b) : \"\", b = Gc(a, b), U(b, c), 0;\n                } catch (d) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== d.name) throw d;\n                    return -d.Pa;\n                }\n            },\n            J: function(a, b, c, d) {\n                try {\n                    b = b ? B(x, b) : \"\";\n                    var e = d & 256;\n                    b = Gc(a, b, d & 4096);\n                    return Hc(c, e ? ac(b, !0) : ac(b));\n                } catch (h) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== h.name) throw h;\n                    return -h.Pa;\n                }\n            },\n            x: function(a, b, c, d) {\n                Ic = d;\n                try {\n                    b = b ? B(x, b) : \"\";\n                    b = Gc(a, b);\n                    var e = d ? Jc() : 0;\n                    return oa(b, c, e).fd;\n                } catch (h) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== h.name) throw h;\n                    return -h.Pa;\n                }\n            },\n            v: function(a, b, c, d) {\n                try {\n                    b = b ? B(x, b) : \"\";\n                    b = Gc(a, b);\n                    if (0 >= d) return -28;\n                    var e = S(b).node;\n                    if (!e) throw new N(44);\n                    if (!e.La.readlink) throw new N(28);\n                    var h = e.La.readlink(e);\n                    var k = Math.min(d, ha(h)), q = p[c + k];\n                    u(h, x, c, d + 1);\n                    p[c + k] = q;\n                    return k;\n                } catch (w) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== w.name) throw w;\n                    return -w.Pa;\n                }\n            },\n            u: function(a) {\n                try {\n                    return a = a ? B(x, a) : \"\", $b(a), 0;\n                } catch (b) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== b.name) throw b;\n                    return -b.Pa;\n                }\n            },\n            f: function(a, b) {\n                try {\n                    return a = a ? B(x, a) : \"\", Hc(b, ac(a));\n                } catch (c) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== c.name) throw c;\n                    return -c.Pa;\n                }\n            },\n            r: function(a, b, c) {\n                try {\n                    return b = b ? B(x, b) : \"\", b = Gc(a, b), 0 === c ? za(b) : 512 === c ? $b(b) : Ta(\"Invalid flags passed to unlinkat\"), 0;\n                } catch (d) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== d.name) throw d;\n                    return -d.Pa;\n                }\n            },\n            q: function(a, b, c) {\n                try {\n                    b = b ? B(x, b) : \"\";\n                    b = Gc(a, b, !0);\n                    var d = Date.now(), e, h;\n                    if (c) {\n                        var k = F[c >> 2] + 4294967296 * E[c + 4 >> 2], q = E[c + 8 >> 2];\n                        1073741823 == q ? e = d : 1073741822 == q ? e = null : e = 1E3 * k + q / 1E6;\n                        c += 16;\n                        k = F[c >> 2] + 4294967296 * E[c + 4 >> 2];\n                        q = E[c + 8 >> 2];\n                        1073741823 == q ? h = d : 1073741822 == q ? h = null : h = 1E3 * k + q / 1E6;\n                    } else h = e = d;\n                    if (null !== (h ?? e)) {\n                        a = e;\n                        var w = S(b, {\n                            $a: !0\n                        }).node;\n                        Sb(w.La.Ua)(w, {\n                            atime: a,\n                            mtime: h\n                        });\n                    }\n                    return 0;\n                } catch (v) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== v.name) throw v;\n                    return -v.Pa;\n                }\n            },\n            m: ()=>Ta(\"\"),\n            l: ()=>{\n                cb = !1;\n                Kc = 0;\n            },\n            A: function(a, b) {\n                a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n                a = new Date(1E3 * a);\n                E[b >> 2] = a.getSeconds();\n                E[b + 4 >> 2] = a.getMinutes();\n                E[b + 8 >> 2] = a.getHours();\n                E[b + 12 >> 2] = a.getDate();\n                E[b + 16 >> 2] = a.getMonth();\n                E[b + 20 >> 2] = a.getFullYear() - 1900;\n                E[b + 24 >> 2] = a.getDay();\n                var c = a.getFullYear();\n                E[b + 28 >> 2] = (0 !== c % 4 || 0 === c % 100 && 0 !== c % 400 ? Mc : Lc)[a.getMonth()] + a.getDate() - 1 | 0;\n                E[b + 36 >> 2] = -(60 * a.getTimezoneOffset());\n                c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n                var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n                E[b + 32 >> 2] = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;\n            },\n            y: function(a, b, c, d, e, h, k) {\n                e = -9007199254740992 > e || 9007199254740992 < e ? NaN : Number(e);\n                try {\n                    if (isNaN(e)) return 61;\n                    var q = T(d);\n                    if (0 !== (b & 2) && 0 === (c & 2) && 2 !== (q.flags & 2097155)) throw new N(2);\n                    if (1 === (q.flags & 2097155)) throw new N(2);\n                    if (!q.Ma.ib) throw new N(43);\n                    if (!a) throw new N(28);\n                    var w = q.Ma.ib(q, a, e, b, c);\n                    var v = w.Kb;\n                    E[h >> 2] = w.Ab;\n                    F[k >> 2] = v;\n                    return 0;\n                } catch (C) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== C.name) throw C;\n                    return -C.Pa;\n                }\n            },\n            z: function(a, b, c, d, e, h) {\n                h = -9007199254740992 > h || 9007199254740992 < h ? NaN : Number(h);\n                try {\n                    var k = T(e);\n                    if (c & 2) {\n                        c = h;\n                        if (32768 !== (k.node.mode & 61440)) throw new N(43);\n                        if (!(d & 2)) {\n                            var q = x.slice(a, a + b);\n                            k.Ma.jb && k.Ma.jb(k, q, c, b, d);\n                        }\n                    }\n                } catch (w) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== w.name) throw w;\n                    return -w.Pa;\n                }\n            },\n            n: (a, b)=>{\n                Nc[a] && (clearTimeout(Nc[a].id), delete Nc[a]);\n                if (!b) return 0;\n                var c = setTimeout(()=>{\n                    delete Nc[a];\n                    Pc(()=>Wc(a, performance.now()));\n                }, b);\n                Nc[a] = {\n                    id: c,\n                    Xb: b\n                };\n                return 0;\n            },\n            B: (a, b, c, d)=>{\n                var e = (new Date).getFullYear(), h = new Date(e, 0, 1).getTimezoneOffset();\n                e = new Date(e, 6, 1).getTimezoneOffset();\n                F[a >> 2] = 60 * Math.max(h, e);\n                E[b >> 2] = Number(h != e);\n                b = (k)=>{\n                    var q = Math.abs(k);\n                    return `UTC${0 <= k ? \"-\" : \"+\"}${String(Math.floor(q / 60)).padStart(2, \"0\")}${String(q % 60).padStart(2, \"0\")}`;\n                };\n                a = b(h);\n                b = b(e);\n                e < h ? (u(a, x, c, 17), u(b, x, d, 17)) : (u(a, x, d, 17), u(b, x, c, 17));\n            },\n            d: ()=>Date.now(),\n            s: ()=>2147483648,\n            c: ()=>performance.now(),\n            o: (a)=>{\n                var b = x.length;\n                a >>>= 0;\n                if (2147483648 < a) return !1;\n                for(var c = 1; 4 >= c; c *= 2){\n                    var d = b * (1 + .2 / c);\n                    d = Math.min(d, a + 100663296);\n                    a: {\n                        d = (Math.min(2147483648, 65536 * Math.ceil(Math.max(a, d) / 65536)) - Ka.buffer.byteLength + 65535) / 65536 | 0;\n                        try {\n                            Ka.grow(d);\n                            Qa();\n                            var e = 1;\n                            break a;\n                        } catch (h) {}\n                        e = void 0;\n                    }\n                    if (e) return !0;\n                }\n                return !1;\n            },\n            E: (a, b)=>{\n                var c = 0;\n                Sc().forEach((d, e)=>{\n                    var h = b + c;\n                    e = F[a + 4 * e >> 2] = h;\n                    for(h = 0; h < d.length; ++h)p[e++] = d.charCodeAt(h);\n                    p[e] = 0;\n                    c += d.length + 1;\n                });\n                return 0;\n            },\n            F: (a, b)=>{\n                var c = Sc();\n                F[a >> 2] = c.length;\n                var d = 0;\n                c.forEach((e)=>d += e.length + 1);\n                F[b >> 2] = d;\n                return 0;\n            },\n            e: function(a) {\n                try {\n                    var b = T(a);\n                    qa(b);\n                    return 0;\n                } catch (c) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== c.name) throw c;\n                    return c.Pa;\n                }\n            },\n            p: function(a, b) {\n                try {\n                    var c = T(a);\n                    p[b] = c.tty ? 2 : P(c.mode) ? 3 : 40960 === (c.mode & 61440) ? 7 : 4;\n                    Na[b + 2 >> 1] = 0;\n                    H[b + 8 >> 3] = BigInt(0);\n                    H[b + 16 >> 3] = BigInt(0);\n                    return 0;\n                } catch (d) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== d.name) throw d;\n                    return d.Pa;\n                }\n            },\n            w: function(a, b, c, d) {\n                try {\n                    a: {\n                        var e = T(a);\n                        a = b;\n                        for(var h, k = b = 0; k < c; k++){\n                            var q = F[a >> 2], w = F[a + 4 >> 2];\n                            a += 8;\n                            var v = Ec(e, p, q, w, h);\n                            if (0 > v) {\n                                var C = -1;\n                                break a;\n                            }\n                            b += v;\n                            if (v < w) break;\n                            \"undefined\" != typeof h && (h += v);\n                        }\n                        C = b;\n                    }\n                    F[d >> 2] = C;\n                    return 0;\n                } catch (G) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== G.name) throw G;\n                    return G.Pa;\n                }\n            },\n            D: function(a, b, c, d) {\n                b = -9007199254740992 > b || 9007199254740992 < b ? NaN : Number(b);\n                try {\n                    if (isNaN(b)) return 61;\n                    var e = T(a);\n                    mc(e, b, c);\n                    H[d >> 3] = BigInt(e.position);\n                    e.ob && 0 === b && 0 === c && (e.ob = null);\n                    return 0;\n                } catch (h) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== h.name) throw h;\n                    return h.Pa;\n                }\n            },\n            I: function(a) {\n                try {\n                    var b = T(a);\n                    return b.Ma?.fsync ? b.Ma.fsync(b) : 0;\n                } catch (c) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== c.name) throw c;\n                    return c.Pa;\n                }\n            },\n            t: function(a, b, c, d) {\n                try {\n                    a: {\n                        var e = T(a);\n                        a = b;\n                        for(var h, k = b = 0; k < c; k++){\n                            var q = F[a >> 2], w = F[a + 4 >> 2];\n                            a += 8;\n                            var v = pa(e, p, q, w, h);\n                            if (0 > v) {\n                                var C = -1;\n                                break a;\n                            }\n                            b += v;\n                            if (v < w) break;\n                            \"undefined\" != typeof h && (h += v);\n                        }\n                        C = b;\n                    }\n                    F[d >> 2] = C;\n                    return 0;\n                } catch (G) {\n                    if (\"undefined\" == typeof W || \"ErrnoError\" !== G.name) throw G;\n                    return G.Pa;\n                }\n            },\n            k: Oc\n        }, Z;\n        (async function() {\n            function a(c) {\n                Z = c.exports;\n                Ka = Z.M;\n                Qa();\n                Y = Z.O;\n                K--;\n                f.monitorRunDependencies?.(K);\n                0 == K && Sa && (c = Sa, Sa = null, c());\n                return Z;\n            }\n            K++;\n            f.monitorRunDependencies?.(K);\n            var b = {\n                a: Xc\n            };\n            if (f.instantiateWasm) return new Promise((c)=>{\n                f.instantiateWasm(b, (d, e)=>{\n                    a(d, e);\n                    c(d.exports);\n                });\n            });\n            Ua ??= f.locateFile ? f.locateFile(\"sql-wasm.wasm\", D) : D + \"sql-wasm.wasm\";\n            return a((await Xa(b)).instance);\n        })();\n        f._sqlite3_free = (a)=>(f._sqlite3_free = Z.P)(a);\n        f._sqlite3_value_text = (a)=>(f._sqlite3_value_text = Z.Q)(a);\n        f._sqlite3_prepare_v2 = (a, b, c, d, e)=>(f._sqlite3_prepare_v2 = Z.R)(a, b, c, d, e);\n        f._sqlite3_step = (a)=>(f._sqlite3_step = Z.S)(a);\n        f._sqlite3_reset = (a)=>(f._sqlite3_reset = Z.T)(a);\n        f._sqlite3_exec = (a, b, c, d, e)=>(f._sqlite3_exec = Z.U)(a, b, c, d, e);\n        f._sqlite3_finalize = (a)=>(f._sqlite3_finalize = Z.V)(a);\n        f._sqlite3_column_name = (a, b)=>(f._sqlite3_column_name = Z.W)(a, b);\n        f._sqlite3_column_text = (a, b)=>(f._sqlite3_column_text = Z.X)(a, b);\n        f._sqlite3_column_type = (a, b)=>(f._sqlite3_column_type = Z.Y)(a, b);\n        f._sqlite3_errmsg = (a)=>(f._sqlite3_errmsg = Z.Z)(a);\n        f._sqlite3_clear_bindings = (a)=>(f._sqlite3_clear_bindings = Z._)(a);\n        f._sqlite3_value_blob = (a)=>(f._sqlite3_value_blob = Z.$)(a);\n        f._sqlite3_value_bytes = (a)=>(f._sqlite3_value_bytes = Z.aa)(a);\n        f._sqlite3_value_double = (a)=>(f._sqlite3_value_double = Z.ba)(a);\n        f._sqlite3_value_int = (a)=>(f._sqlite3_value_int = Z.ca)(a);\n        f._sqlite3_value_type = (a)=>(f._sqlite3_value_type = Z.da)(a);\n        f._sqlite3_result_blob = (a, b, c, d)=>(f._sqlite3_result_blob = Z.ea)(a, b, c, d);\n        f._sqlite3_result_double = (a, b)=>(f._sqlite3_result_double = Z.fa)(a, b);\n        f._sqlite3_result_error = (a, b, c)=>(f._sqlite3_result_error = Z.ga)(a, b, c);\n        f._sqlite3_result_int = (a, b)=>(f._sqlite3_result_int = Z.ha)(a, b);\n        f._sqlite3_result_int64 = (a, b)=>(f._sqlite3_result_int64 = Z.ia)(a, b);\n        f._sqlite3_result_null = (a)=>(f._sqlite3_result_null = Z.ja)(a);\n        f._sqlite3_result_text = (a, b, c, d)=>(f._sqlite3_result_text = Z.ka)(a, b, c, d);\n        f._sqlite3_aggregate_context = (a, b)=>(f._sqlite3_aggregate_context = Z.la)(a, b);\n        f._sqlite3_column_count = (a)=>(f._sqlite3_column_count = Z.ma)(a);\n        f._sqlite3_data_count = (a)=>(f._sqlite3_data_count = Z.na)(a);\n        f._sqlite3_column_blob = (a, b)=>(f._sqlite3_column_blob = Z.oa)(a, b);\n        f._sqlite3_column_bytes = (a, b)=>(f._sqlite3_column_bytes = Z.pa)(a, b);\n        f._sqlite3_column_double = (a, b)=>(f._sqlite3_column_double = Z.qa)(a, b);\n        f._sqlite3_bind_blob = (a, b, c, d, e)=>(f._sqlite3_bind_blob = Z.ra)(a, b, c, d, e);\n        f._sqlite3_bind_double = (a, b, c)=>(f._sqlite3_bind_double = Z.sa)(a, b, c);\n        f._sqlite3_bind_int = (a, b, c)=>(f._sqlite3_bind_int = Z.ta)(a, b, c);\n        f._sqlite3_bind_text = (a, b, c, d, e)=>(f._sqlite3_bind_text = Z.ua)(a, b, c, d, e);\n        f._sqlite3_bind_parameter_index = (a, b)=>(f._sqlite3_bind_parameter_index = Z.va)(a, b);\n        f._sqlite3_sql = (a)=>(f._sqlite3_sql = Z.wa)(a);\n        f._sqlite3_normalized_sql = (a)=>(f._sqlite3_normalized_sql = Z.xa)(a);\n        f._sqlite3_changes = (a)=>(f._sqlite3_changes = Z.ya)(a);\n        f._sqlite3_close_v2 = (a)=>(f._sqlite3_close_v2 = Z.za)(a);\n        f._sqlite3_create_function_v2 = (a, b, c, d, e, h, k, q, w)=>(f._sqlite3_create_function_v2 = Z.Aa)(a, b, c, d, e, h, k, q, w);\n        f._sqlite3_update_hook = (a, b, c)=>(f._sqlite3_update_hook = Z.Ba)(a, b, c);\n        f._sqlite3_open = (a, b)=>(f._sqlite3_open = Z.Ca)(a, b);\n        var ia = f._malloc = (a)=>(ia = f._malloc = Z.Da)(a), fa = f._free = (a)=>(fa = f._free = Z.Ea)(a);\n        f._RegisterExtensionFunctions = (a)=>(f._RegisterExtensionFunctions = Z.Fa)(a);\n        var Db = (a, b)=>(Db = Z.Ga)(a, b), Wc = (a, b)=>(Wc = Z.Ha)(a, b), wa = (a)=>(wa = Z.Ia)(a), z = (a)=>(z = Z.Ja)(a), sa = ()=>(sa = Z.Ka)();\n        f.stackSave = ()=>sa();\n        f.stackRestore = (a)=>wa(a);\n        f.stackAlloc = (a)=>z(a);\n        f.cwrap = (a, b, c, d)=>{\n            var e = !c || c.every((h)=>\"number\" === h || \"boolean\" === h);\n            return \"string\" !== b && e && !d ? f[\"_\" + a] : (...h)=>Tc(a, b, c, h);\n        };\n        f.addFunction = Aa;\n        f.removeFunction = A;\n        f.UTF8ToString = ua;\n        f.ALLOC_NORMAL = ea;\n        f.allocate = da;\n        f.allocateUTF8OnStack = xa;\n        function Yc() {\n            function a() {\n                f.calledRun = !0;\n                if (!La) {\n                    if (!f.noFSInit && !Ib) {\n                        var b, c;\n                        Ib = !0;\n                        d ??= f.stdin;\n                        b ??= f.stdout;\n                        c ??= f.stderr;\n                        d ? V(\"stdin\", d) : Zb(\"/dev/tty\", \"/dev/stdin\");\n                        b ? V(\"stdout\", null, b) : Zb(\"/dev/tty\", \"/dev/stdout\");\n                        c ? V(\"stderr\", null, c) : Zb(\"/dev/tty1\", \"/dev/stderr\");\n                        oa(\"/dev/stdin\", 0);\n                        oa(\"/dev/stdout\", 1);\n                        oa(\"/dev/stderr\", 1);\n                    }\n                    Z.N();\n                    Jb = !1;\n                    f.onRuntimeInitialized?.();\n                    if (f.postRun) for(\"function\" == typeof f.postRun && (f.postRun = [\n                        f.postRun\n                    ]); f.postRun.length;){\n                        var d = f.postRun.shift();\n                        $a.unshift(d);\n                    }\n                    Za($a);\n                }\n            }\n            if (0 < K) Sa = Yc;\n            else {\n                if (f.preRun) for(\"function\" == typeof f.preRun && (f.preRun = [\n                    f.preRun\n                ]); f.preRun.length;)bb();\n                Za(ab);\n                0 < K ? Sa = Yc : f.setStatus ? (f.setStatus(\"Running...\"), setTimeout(()=>{\n                    setTimeout(()=>f.setStatus(\"\"), 1);\n                    a();\n                }, 1)) : a();\n            }\n        }\n        if (f.preInit) for(\"function\" == typeof f.preInit && (f.preInit = [\n            f.preInit\n        ]); 0 < f.preInit.length;)f.preInit.pop()();\n        Yc();\n        // The shell-pre.js and emcc-generated code goes above\n        return Module;\n    }); // The end of the promise being returned\n    return initSqlJsPromise;\n} // The end of our initSqlJs function\n;\n// This bit below is copied almost exactly from what you get when you use the MODULARIZE=1 flag with emcc\n// However, we don't want to use the emcc modularization. See shell-pre.js\nif (true) {\n    module.exports = initSqlJs;\n    // This will allow the module to be used in ES6 or CommonJS\n    module.exports[\"default\"] = initSqlJs;\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sql.js/dist/sql-wasm.js\n");

/***/ })

};
;